<?php
class Telegro
{
    /**
     * @var Telegram's base api server url. Defaults to 'https://api.telegram.org/bot'.
     */
    public $base_url = "https://api.telegram.org/bot";
    /**
     * @var the bot token generated by Telegram.
     */
    private $bot_token;
    /**
     * @var the destination server to send request. Consists of the concatenation of the $base_url and the $bot_token.
     */
    private $server;

    /**
     * Set bot_token and server on object creation.
     * @param $bot_token. 
     * @return void.
     */
    public function __construct($bot_token)
    {
    	$this->bot_token = $bot_token;
        $this->setServer($this->base_url);
    }

    /**
     * Set server's url.
     * @param $base_url. 
     * @return void.
     */
    private function setServer($base_url)
    {
    	$this->server = $this->base_url . $this->bot_token;
    }

    /**
     * Change base url and reset the server.
     * @param $base_url. 
     * @return void.
     */
    public function setBaseUrl($base_url)
    {
    	$this->base_url = $base_url;
    	$this->setServer($base_url);
    }

    /**
     * Returns base url value.
     * @return $base_url.
     */
    public function getBaseUrl()
    {
        return $this->base_url;
    }

    /**
     * Set webhook.
     * @param $hook_url.
     * @return true | false.
     */
    public function setWebhook($hook_url)
    {
        return $this->execute([
            'method' => 'setwebhook',
            'values' => ['url' => $hook_url]
        ]);
    }

    /**
     * Unset (Remove) webhook.
     * @return TRUE | FALSE.
     */
    public function unsetWebhook()
    {
        return $this->execute([
            'method' => 'setwebhook',
            'values' => ['url' => '']
        ]);
    } 

    /**
     * Get bot information.
     * @return Object.
     */
    public function getMe()
    {
        $result = $this->execute([
            'method' => 'getMe'
        ]);
        return json_decode($result);
    }

    /**
     * This method sends curl request to the server to run the given method and return curl response body.
     * @param 
     * $options [ 
     *  header => Could be any mime-type. Defaults to 'application/json'.
     *  ssl_verifier => Depends on the request need, could be TRUE or FALSE. Defaults to 'TRUE'.
     *  method => Could be any Telegram api method but not NULL.
     *  values => The method's parameters.
     * ]
     * @return response body.
     * @throws Exception if the method does not exist.
     */
    private function execute($options)
    {
        $default_options = [
            'header' => ['application/json'],
            'ssl_verifier' => true,
            'method' => null,
            'values' => [],
        ];
        $options = array_merge($default_options, $options);
        $request_url = "{$this->server}/{$options['method']}";

        //Throw exception if method value is null.
        if (!$options['method']) {
            throw new Exception("Method value could not be null.");
        }
        //Initialize curl to send request.
        $curl_handler = curl_init(); 
        curl_setopt($curl_handler, CURLOPT_HTTPHEADER, $options['header']);
        curl_setopt($curl_handler, CURLOPT_URL, $request_url); 
        curl_setopt($curl_handler, CURLOPT_RETURNTRANSFER, true); 
        curl_setopt($curl_handler, CURLOPT_HEADER, true);
        curl_setopt($curl_handler, CURLOPT_SSL_VERIFYPEER, $options['ssl_verifier']);
        curl_setopt($curl_handler, CURLOPT_POSTFIELDS, $options['values']); 
        $result = curl_exec($curl_handler);
        $header_size = curl_getinfo($curl_handler, CURLINFO_HEADER_SIZE);
        $header = substr($result, 0, $header_size);
        $body = substr($result, $header_size);
        curl_close($curl_handler);
        return $body;
    }
}
?>